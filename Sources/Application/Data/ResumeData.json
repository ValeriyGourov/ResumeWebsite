{
	"Name": {
		"En": "Valeriy",
		"Ru": "Валерий"
	},
	"Surname": {
		"En": "Gourov",
		"Ru": "Гуров"
	},
	"Title": {
		"En": "C# | .NET | ASP.NET Core | Azure developer",
		"Ru": "C# | .NET | ASP.NET Core | Azure разработчик"
	},
	"SocialButtons": [
		{
			"Uri": "https://www.linkedin.com/in/valeriygourov",
			"IconName": "linkedin"
		}
	],
	"Contacts": [
		{
			"Title": {
				"En": "Location",
				"Ru": "Местоположение"
			},
			"Description": {
				"En": "Ukraine, Krivoy Rog",
				"Ru": "Украина, Кривой Рог"
			}
		},
		{
			"Title": {
				"En": "Phone",
				"Ru": "Телефон"
			},
			"Description": {
				"En": "+380 (67) 917-89-88",
				"Ru": "+380 (67) 917-89-88"
			},
			"Hyperlink": "tel:+380679178988"
		},
		{
			"Title": {
				"En": "Web",
				"Ru": "Сайт"
			},
			"Description": {
				"En": "azurewebsites.net",
				"Ru": "azurewebsites.net"
			},
			"Hyperlink": "https://valeriygourovresume.azurewebsites.net"
		},
		{
			"Title": {
				"En": "Email",
				"Ru": "Электронная почта"
			},
			"Description": {
				"En": "Valeriy.Gourov@outlook.com",
				"Ru": "Valeriy.Gourov@outlook.com"
			},
			"Hyperlink": "mailto:Valeriy.Gourov@outlook.com"
		}
	],
	"Intro": {
		"En": "Senior .NET developer with 8+ years (20+ years total) experience in building scalable and reliable systems using C#, .NET, ASP.NET Core. I specialize in software architecture, performance optimization, integrations, and implementation of security and DevOps practices. I strive to write clean, maintainable code and build high quality products. Demanding in details, but aiming for a balance between excellence and practicality.",
		"Ru": "Старший .NET-разработчик с 8+ годами (20+ лет общего) опыта в создании масштабируемых и надежных систем с использованием C#, .NET, ASP.NET Core. Специализируюсь на архитектуре программного обеспечения, оптимизации производительности, интеграциях и внедрении практик безопасности и DevOps. Стремлюсь писать чистый, поддерживаемый код и создавать продукты высокого качества. Требователен к деталям, но стараюсь ориентироваться на баланс между совершенством и практичностью."
	},
	"Achievements": [
		{
			"En": "Optimized (without changing the solution architecture) the data reading process (Entity Framework) for the web page through getting rid of looping queries, bundling individual queries, and more efficient LINQ expressions. This reduced the page load time from 40 seconds to 2 seconds.",
			"Ru": "Оптимизировал (без изменения архитектуры решения) процесс чтения данных (Entity Framework) для веб-страницы через избавление от запросов в цикле, объединения отдельных запросов в пакеты и более эффективные выражения LINQ. Это позволило уменьшить время загрузки страницы с 40 до 2 секунд."
		},
		{
			"En": "Implemented automatic parallelization of data acquisition processes using TPL Dataflow, which increased processing speed by 2-10 times.",
			"Ru": "Реализовал автоматическое распараллеливание процессов сбора данных с помощью TPL Dataflow, что увеличило скорость обработки в 2-10 раз."
		},
		{
			"En": "Replaced inefficient stored procedures with optimized Entity Framework Core queries, speeding up data writes by 2-3x and improving data availability for end users.",
			"Ru": "Заменил неэффективные хранимые процедуры на оптимизированные запросы Entity Framework Core, что ускорило запись данных в 2-3 раза и улучшило доступность данных для конечных пользователей."
		},
		{
			"En": "Implemented logging with ELK integration, which significantly reduced incident investigation time.",
			"Ru": "Внедрил журналирование с интеграцией ELK, что существенно сократило время расследования инцидентов."
		},
		{
			"En": "Implemented distributed monolith configuration management via HashiCorp Consul, allowing for rapid changes in system behavior without downtime.",
			"Ru": "Реализовал управление настройками распределённого монолита через HashiCorp Consul, что позволило оперативно менять поведение системы без простоев."
		},
		{
			"En": "Integrated Azure Key Vault to securely store secrets without committing them to source code and repository.",
			"Ru": "Интегрировал Azure Key Vault для безопасного хранения секретов без их фиксирования в исходном коде и репозитории."
		},
		{
			"En": "Initiated migration of legacy distributed monolith to AWS using event-driven architecture (SNS, SQS), automatic scaling of instance counts, centralized and personalized resiliense tuning and retry policy.",
			"Ru": "Инициировал миграцию унаследованного распределённого монолита в AWS с использованием архитектуры, основанной на событиях (SNS, SQS), автоматическим масштабированием количества экземпляров, централизованной и персональной настройкой устойчивости и политики повторов."
		},
		{
			"En": "Implemented code style conventions, static code analysis (both locally and in the CI/CD process), and code review, which significantly increased code quality and reduced bugs in the final product.",
			"Ru": "Внедрил соглашения по стилю кода, статический анализ кода (ка локально, так и в процессе CI/CD), обзор кода, что существенно увеличило качество кода и уменьшило количество ошибок в конечном продукте."
		}
	],
	"Expertise": [
		{
			"Title": {
				"En": "Application architecture",
				"Ru": "Архитектура приложений"
			},
			"Description": {
				"En": "Designing architecture for scalable C#/.NET applications in a cloud environment (Azure/AWS).",
				"Ru": "Проектирование архитектуры масштабируемых приложений C#/.NET в облачной среде (Azure/AWS)."
			}
		},
		{
			"Title": {
				"En": "Application development",
				"Ru": "Разработка приложений"
			},
			"Description": {
				"En": "Development of RESTful APIs, Blazor applications, distributed systems using SignalR, gRPC, WebSockert, RabbitMQ and others.",
				"Ru": "Разработка RESTful API, приложений Blazor, распределенных систем с использованием SignalR, gRPC, WebSockert, RabbitMQ и других."
			}
		},
		{
			"Title": {
				"En": "Performance optimization",
				"Ru": "Оптимизация производительности"
			},
			"Description": {
				"En": "Optimize application code and database interactions (Entity Framework Core, SQL, NoSQL).",
				"Ru": "Оптимизация кода приложений и взаимодействия с базами данных (Entity Framework Core, SQL, NoSQL)."
			}
		},
		{
			"Title": {
				"En": "Infrastructure",
				"Ru": "Инфраструктура"
			},
			"Description": {
				"En": "CI/CD implementation (Docker, Azure, AWS), unit, integration and other types of testing (MSTest, xUnit), security (Azure Key Vault), application health (health checks, metrics, ELK).",
				"Ru": "Внедрение CI/CD (Docker, Azure, AWS), модульного, интеграционного и других видов тестирования (MSTest, xUnit), безопасность (Azure Key Vault), работоспособность приложений (health checks, метрики, ELK)."
			}
		},
		{
			"Title": {
				"En": "Integration",
				"Ru": "Интеграция"
			},
			"Description": {
				"En": "Use of external systems such as 1C, Twilio, bank payment systems, Telegram, for interaction and data exchange.",
				"Ru": "Использование внешних систем, таких как 1С, Twilio, платежные системы банков, Telegram, для взаимодействия и обмена данными."
			}
		},
		{
			"Title": {
				"En": "Technical leadership",
				"Ru": "Техническое лидерство"
			},
			"Description": {
				"En": "Technical leadership, mentoring other team members, code review, implementing code standards.",
				"Ru": "Лидерство в технических вопросах, наставничество других членов команды, обзор кода (code review), внедрение стандартов кода."
			}
		}
	],
	"Skills": [
		{
			"Title": {
				"En": "C#",
				"Ru": "C#"
			},
			"Percent": 85
		},
		{
			"Title": {
				"En": ".NET",
				"Ru": ".NET"
			},
			"Percent": 85
		},
		{
			"Title": {
				"En": "ASP.NET Core",
				"Ru": "ASP.NET Core"
			},
			"Percent": 85
		},
		{
			"Title": {
				"En": "Blazor",
				"Ru": "Blazor"
			},
			"Percent": 80
		},
		{
			"Title": {
				"En": "Entity Framework Core",
				"Ru": "Entity Framework Core"
			},
			"Percent": 85
		},
		{
			"Title": {
				"En": "LINQ",
				"Ru": "LINQ"
			},
			"Percent": 85
		},
		{
			"Title": {
				"En": "Web API",
				"Ru": "Web API"
			},
			"Percent": 85
		},
		{
			"Title": {
				"En": "gRPC",
				"Ru": "gRPC"
			},
			"Percent": 60
		},
		{
			"Title": {
				"En": "WebSocket",
				"Ru": "WebSocket"
			},
			"Percent": 60
		},
		{
			"Title": {
				"En": "SignalR",
				"Ru": "SignalR"
			},
			"Percent": 60
		},
		{
			"Title": {
				"En": "Azure",
				"Ru": "Azure"
			},
			"Percent": 50
		},
		{
			"Title": {
				"En": "AWS",
				"Ru": "AWS"
			},
			"Percent": 30
		},
		{
			"Title": {
				"En": "Microsoft SQL Server",
				"Ru": "Microsoft SQL Server"
			},
			"Percent": 60
		},
		{
			"Title": {
				"En": "PostgreSQL",
				"Ru": "PostgreSQL"
			},
			"Percent": 30
		},
		{
			"Title": {
				"En": "MySQL",
				"Ru": "MySQL"
			},
			"Percent": 30
		},
		{
			"Title": {
				"En": "MongoDB, LiteDB",
				"Ru": "MongoDB, LiteDB"
			},
			"Percent": 50
		},
		{
			"Title": {
				"En": "RabbitMQ",
				"Ru": "RabbitMQ"
			},
			"Percent": 50
		},
		{
			"Title": {
				"En": "Docker",
				"Ru": "Docker"
			},
			"Percent": 60
		},
		{
			"Title": {
				"En": "GitHub Actions",
				"Ru": "GitHub Actions"
			},
			"Percent": 30
		},
		{
			"Title": {
				"En": "Prometheus",
				"Ru": "Prometheus"
			},
			"Percent": 30
		},
		{
			"Title": {
				"En": "Telegram API",
				"Ru": "Telegram API"
			},
			"Percent": 55
		},
		{
			"Title": {
				"En": "HashiCorp Consul",
				"Ru": "HashiCorp Consul"
			},
			"Percent": 50
		},
		{
			"Title": {
				"En": "Microsoft Bot Framework",
				"Ru": "Microsoft Bot Framework"
			},
			"Percent": 45
		},
		{
			"Title": {
				"En": "XAML, WPF",
				"Ru": "XAML, WPF"
			},
			"Percent": 35
		},
		{
			"Title": {
				"En": ".NET MAUI",
				"Ru": ".NET MAUI"
			},
			"Percent": 20
		},
		{
			"Title": {
				"En": "TeamCity",
				"Ru": "TeamCity"
			},
			"Percent": 40
		},
		{
			"Title": {
				"En": "Azure DevOps",
				"Ru": "Azure DevOps"
			},
			"Percent": 30
		},
		{
			"Title": {
				"En": "GitLab",
				"Ru": "GitLab"
			},
			"Percent": 50
		},
		{
			"Title": {
				"En": ".NET Aspire",
				"Ru": ".NET Aspire"
			},
			"Percent": 65
		},
		{
			"Title": {
				"En": "MassTransit",
				"Ru": "MassTransit"
			},
			"Percent": 45
		},
		{
			"Title": {
				"En": "MSTest",
				"Ru": "MSTest"
			},
			"Percent": 70
		},
		{
			"Title": {
				"En": "xUnit",
				"Ru": "xUnit"
			},
			"Percent": 40
		},
		{
			"Title": {
				"En": "1C",
				"Ru": "1С"
			},
			"Percent": 85
		},
		{
			"Title": {
				"En": "Twilio",
				"Ru": "Twilio"
			},
			"Percent": 60
		},
		{
			"Title": {
				"En": "Selenium WebDriver",
				"Ru": "Selenium WebDriver"
			},
			"Percent": 55
		},
		{
			"Title": {
				"En": "Puppeteer",
				"Ru": "Puppeteer"
			},
			"Percent": 60
		},
		{
			"Title": {
				"En": "HTML, CSS",
				"Ru": "HTML, CSS"
			},
			"Percent": 40
		},
		{
			"Title": {
				"En": "Microservices",
				"Ru": "Микрослужбы"
			},
			"Percent": 80
		},
		{
			"Title": {
				"En": "OpenTelemetry",
				"Ru": "OpenTelemetry"
			},
			"Percent": 40
		},
		{
			"Title": {
				"En": "TPL Dataflow",
				"Ru": "TPL Dataflow"
			},
			"Percent": 65
		},
		{
			"Title": {
				"En": "OData",
				"Ru": "OData"
			},
			"Percent": 25
		},
		{
			"Title": {
				"En": "Redis",
				"Ru": "Redis"
			},
			"Percent": 50
		},
		{
			"Title": {
				"En": "ElasticSearch",
				"Ru": "ElasticSearch"
			},
			"Percent": 35
		},
		{
			"Title": {
				"En": "Apache Kafka",
				"Ru": "Apache Kafka"
			},
			"Percent": 30
		}
	],
	"Experience": [
		{
			"StartDate": "2017-12-01",
			"EndDate": "2018-12-01",
			"Institution": {
				"En": "TQM systems",
				"Ru": "TQM systems"
			},
			"Position": {
				"En": "C# developer",
				"Ru": "Разработчик C#"
			},
			"Location": {
				"En": "Ukraine",
				"Ru": "Украина"
			},
			"Projects": [
				{
					"Description": {
						"En": "An integration platform for data exchange:",
						"Ru": "Интеграционная платформа для обмена данными:"
					},
					"Details": [
						{
							"En": "Developed and implemented the architecture of exchange modules (ASP.NET Core) with \"1C:Enterprise 8\" (several different configurations), \"Nova Poshta\", \"Prom.ua\", as well as modules for the logistics company and the main site of the system. This allowed us to add new entities to the module with minimal time consumption.",
							"Ru": "Разработал и реализовал архитектуру модулей обмена (ASP.NET Core) с \"1С:Предприятие 8\" (несколько различных конфигураций), \"Новой почтой\", \"Prom.ua\", а также модулей для логистической компании и основного сайта системы. Это позволило добавлять в модуль новые сущности с минимальными затратами времени."
						}
					]
				}
			]
		},
		{
			"StartDate": "2019-02-01",
			"EndDate": "2019-07-01",
			"Institution": {
				"En": "Must2Go",
				"Ru": "Must2Go"
			},
			"Position": {
				"En": "C# developer",
				"Ru": "Разработчик C#"
			},
			"Location": {
				"En": "United Arab Emirates",
				"Ru": "Объединённые Арабские Эмираты"
			},
			"Projects": [
				{
					"Description": {
						"En": "Server part of the tourist site (ASP.NET Web API):",
						"Ru": "Серверная часть туристического сайта (ASP.NET Web API):"
					},
					"Details": [
						{
							"En": "Integrated the app with a banking system, allowing payments to be accepted on the site using that bank's mechanisms.",
							"Ru": "Интегрировал приложение с банковской системой, что позволило принимать платежи на сайте с использованием механизмов данного банка."
						},
						{
							"En": "Developed the initial version of a new mechanism for presenting the site's home page information without radical changes to the application architecture. This allowed launching the new feature as quickly as possible (with subsequent implementation of a more correct version), which significantly increased the attractiveness of the site from the end users' point of view.",
							"Ru": "Разработал первичную версию нового механизма представления информации главной страницы сайта без радикальных изменений архитектуры приложения. Это позволило запустить новую возможность в работу максимально оперативно (с последующей реализацией более правильного варианта), что существенно повысило привлекательность сайта с точки зрения конечных пользователей."
						}
					]
				}
			]
		},
		{
			"StartDate": "2019-08-01",
			"EndDate": "2019-11-01",
			"Institution": {
				"En": "Visartech",
				"Ru": "Visartech"
			},
			"Position": {
				"En": "C# developer",
				"Ru": "Разработчик C#"
			},
			"Location": {
				"En": "Ukraine",
				"Ru": "Украина"
			},
			"Projects": [
				{
					"Description": {
						"En": "A system for processing and filtering incoming phone calls:",
						"Ru": "Система обработки и фильтрации входящих телефонных звонков:"
					},
					"Details": [
						{
							"En": "Designed and implemented the server-side foundation for an incoming phone call processing and filtering system based on ASP.NET Core and Azure App Services.",
							"Ru": "Спроектировал и реализовал основу серверной части для системы обработки и фильтрации входящих телефонных звонков на базе ASP.NET Core и Azure App Services."
						},
						{
							"En": "Implemented integration with Azure Key Vault to securely store application secrets.",
							"Ru": "Реализовал интеграцию с Azure Key Vault для безопасного хранения секретов приложения."
						},
						{
							"En": "Integrated the app with Twilio for primary management of incoming calls and making outbound calls.",
							"Ru": "Интегрировал приложение с Twilio для первичного управления входящими звонками и совершения исходящих звонков."
						},
						{
							"En": "Engaged SignalR and Azure SignalR Service to interact with the mobile app.",
							"Ru": "Задействовал SignalR и Azure SignalR Service для взаимодействия с мобильным приложением."
						}
					]
				}
			]
		},
		{
			"StartDate": "2020-07-20",
			"EndDate": "2025-02-07",
			"Institution": {
				"En": "TemaBit",
				"Ru": "TemaBit"
			},
			"Position": {
				"En": "C# developer",
				"Ru": "Разработчик C#"
			},
			"Location": {
				"En": "Ukraine",
				"Ru": "Украина"
			},
			"Projects": [
				{
					"Description": {
						"En": "A job management system for drivers:",
						"Ru": "Система управления заданиями для водителей:"
					},
					"Details": [
						{
							"En": "Designed and implemented the foundation of a job management system for drivers based on ASP.NET Core and Telegram, which allowed drivers to work with jobs without creating a specialized and more difficult to implement mobile application.",
							"Ru": "Спроектировал и реализовал основу системы управления заданиями для водителей на базе ASP.NET Core и Telegram, что позволило водителям работать с заданиями без создания специализированного и более сложного в реализации мобильного приложения."
						},
						{
							"En": "Implemented a basic user interface flow subsystem for interacting with the system via a Telegram chat bot.",
							"Ru": "Реализовал базовую подсистему потока интерфейса пользователя для взаимодействия с системой через чат бота Telegram."
						}
					]
				},
				{
					"Description": {
						"En": "A system for collecting information from external sources:",
						"Ru": "Система сбора информации из внешних источников:"
					},
					"Details": [
						{
							"En": "Designed a subsystem to collect data through a set of proxy servers with the ability to rotate and match them. This significantly reduced the number of failed data collection sessions, which, in turn, reduced the likelihood of users not having relevant data to analyze.",
							"Ru": "Спроектировал подсистему сбора данных через набор прокси-серверов с возможностью их ротации и подбора подходящего. Это позволило существенно уменьшить количество неудачных сессий сбора данных, что, в свою очередь, уменьшило вероятность отсутствия у пользователей актуальных данных для анализа."
						},
						{
							"En": "Optimized and unified inefficient data recording in SQL Server, implemented on stored procedures, by replacing it with Entity Framework Core and more efficient processing algorithms (yes, such a paradox). This allowed to reduce the writing time by 2-3 times and increase the speed of receiving new data by end users.",
							"Ru": "Оптимизировал и унифицировал неэффективную запись данных в SQL Server, реализованную на хранимых процедурах, путём замены на Entity Framework Core и более эффективные алгоритмы обработки (да, такой вот парадокс). Это позволило уменьшить время записи в 2-3 раза и увеличить скорость получения новых данных конечными пользователями."
						},
						{
							"En": "Implemented configuration management of a distributed monolith in the Production and Test environments using HashiCorp Consul, allowing the application's behavior to be changed quickly without downtime.",
							"Ru": "Реализовал управление настройками распределённого монолита в средах “Production” и “Test” с использованием HashiCorp Consul, что позволило оперативно менять поведение приложения без его простоя."
						},
						{
							"En": "Implemented a full logging system with log events sent to ELK. This significantly reduced the time required to investigate incidents.",
							"Ru": "Внедрил полноценную систему журналирования с отправкой событий журнала в ELK. Это позволило существенно сократить время расследования инцидентов."
						},
						{
							"En": "Implemented health monitoring (health check, metrics). This increased awareness of the operational state of the application and allowed faster response to failures.",
							"Ru": "Реализовал мониторинг состояния (проверка работоспособности (health check), метрики). Это повысило информированность об оперативном состоянии приложения и позволило быстрее реагировать на сбои."
						}
					]
				},
				{
					"Description": {
						"En": "New version of the system for collecting information from external sources:",
						"Ru": "Новая версия системы сбора информации из внешних источников:"
					},
					"Details": [
						{
							"En": "Initiated the implementation of a new version of the application with migration to the cloud (AWS) and using event-driven architecture (SNS and SQS), automatically scaling the number of instances of data collection modules based on the number of jobs.",
							"Ru": "Инициировал реализацию новой версии приложения с миграцией в облако (AWS) и использованием архитектуры, основанной на событиях (SNS и SQS), автоматическим масштабированием количества экземпляров модулей сбора данных в зависимости от количества заданий."
						},
						{
							"En": "I implemented code style conventions, code analysis by syntax analyzers, code review both during local work and CI/CD process, which significantly increased the quality of the code itself and reduced the number of errors in the final product.",
							"Ru": "Внедрил соглашения по стилю кода, анализ кода синтаксическими анализаторами, обзор кода как при локальной работе, так и в процессе CI/CD, что существенно увеличило качество самого кода и уменьшило количество ошибок в конечном продукте."
						},
						{
							"En": "Implemented unit and integration tests, which significantly increased system reliability and reduced errors in the production environment.",
							"Ru": "Реализовал модульные и интеграционные тесты, что существенно увеличило надёжность системы и уменьшило количество ошибок в производственной среде."
						},
						{
							"En": "Implemented automatic parallelization of the data collection process using TPL Dataflow, which allowed to increase the processing speed by 2-10 times on the same hardware resources, depending on the data source.",
							"Ru": "Реализовал автоматическое распараллеливание процесса сбора данных с помощью TPL Dataflow, что позволило на тех же самых аппаратных ресурсах увеличить скорость обработки в 2-10 раз в зависимости от источника данных."
						},
						{
							"En": "Designed and implemented integration with external data sources on the web with support for retry logic, fault tolerance, etc. (with unified setting of the general policy and the possibility of flexible customization for a particular module), which allowed to significantly increase the stability of the collection process and the amount of collected data.",
							"Ru": "Спроектировал и реализовал интеграцию с внешними источниками данных в интернете с поддержкой логики повторных попыток, устойчивости к сбоям и т.п. (с унифицированной настройкой общей политики и возможностью гибкой настройки для конкретного модуля), что позволило существенно повысить устойчивость процесса сбора и количество собираемых данных."
						}
					]
				}
			]
		}
	],
	"Education": [
		{
			"StartYear": 1995,
			"EndYear": 2001,
			"Institution": {
				"En": "Krivoy Rog Technical University",
				"Ru": "Криворожский технический университет"
			},
			"Position": {
				"En": "Mining Equipment",
				"Ru": "Горное оборудование"
			},
			"Location": {
				"En": "Krivoy Rog, Ukraine",
				"Ru": "Кривой Рог, Украина"
			},
			"Description": {
				"En": "Faculty of mechanical engineering. Specialist.",
				"Ru": "Механико-машиностроительный факультет. Специалист."
			}
		}
	],
	"Profiles": [
		{
			"Title": {
				"En": "GitHub",
				"Ru": "GitHub"
			},
			"Description": {
				"En": "All my open source projects for you analyze.",
				"Ru": "Все мои проекты с открытым кодом для вашего анализа."
			},
			"Uri": "https://github.com/ValeriyGourov",
			"IconName": "github"
		}
	],
	"Awards": [],
	"Portfolio": [
		{
			"Title": {
				"En": "Resume website",
				"Ru": "Сайт-резюме"
			},
			"Description": {
				"En": "A resume site to present information about me. You are now on this site or are reading a resume generated by this site. Implemented using ASP.NET Core Blazor, published to Azure using GitHub Actions.",
				"Ru": "Сайт-резюме для представления информации обо мне. Вы сейчас находитесь на этом сайте либо же читаете резюме, сформированное этим сайтом. Реализован с помощью ASP.NET Core Blazor, публикуется в Azure с помощью GitHub Actions."
			},
			"Uri": "https://github.com/ValeriyGourov/ResumeWebsite",
			"ImageUri": "images/portfolio/ResumeWebsite.png"
		},
		{
			"Title": {
				"En": "Testing the speed of requests",
				"Ru": "Тестирование скорости запросов"
			},
			"Description": {
				"En": "Determining the relative speed of data queries under similar conditions. Different data query technologies such as REST, gRPC, WebSocket, etc. are compared. NBomber and BenchmarkDotNet are used to perform the measurements, and parts of the project are orchestrated using .NET Aspire.",
				"Ru": "Определение отностительной скорости выполнения запросов данных в схожих условиях. Сравниваются различные технологие запроса данных, такие как REST, gRPC, WebSocket и т.п. Для выполнения замеров используются NBomber и BenchmarkDotNet, части проекта оркестрируются с помощью .NET Aspire."
			},
			"Uri": "https://github.com/ValeriyGourov/DataQuerySpeedTest",
			"ImageUri": "images/portfolio/DataQuerySpeedTest.png"
		}
	],
	"Clients": [
		{
			"Name": {
				"En": "Visartech",
				"Ru": "Visartech"
			},
			"Uri": "https://www.visartech.com/",
			"Logo": "images/clients/Visartech.svg"
		},
		{
			"Name": {
				"En": "Must2Go",
				"Ru": "Must2Go"
			},
			"Uri": "https://must2go.com/",
			"Logo": "images/clients/Must2Go.png"
		},
		{
			"Name": {
				"En": "TQM systems",
				"Ru": "TQM systems"
			},
			"Uri": "https://tqm.com.ua/",
			"Logo": "images/clients/TQM systems.png"
		},
		{
			"Name": {
				"En": "Employee Confidential",
				"Ru": "Employee Confidential"
			},
			"Uri": "https://employeeconfidential.com/",
			"Logo": "images/clients/Employee Confidential.png"
		},
		{
			"Name": {
				"En": "AutoMobile Technologies",
				"Ru": "AutoMobile Technologies"
			},
			"Uri": "https://amt.company/",
			"Logo": "images/clients/AutoMobile Technologies.png"
		},
		{
			"Name": {
				"En": "TemaBit",
				"Ru": "TemaBit"
			},
			"Uri": "https://temabit.com/",
			"Logo": "images/clients/TemaBit.svg"
		}
	]
}
